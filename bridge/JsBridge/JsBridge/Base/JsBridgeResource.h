#import <Foundation/Foundation.h>
static NSString * const JsBridge_resource_event = @"var My_JsBridge=function(){var msgHandlerName='%@';var bridgeSyncIdentifier='%@';var bridgeAsyncIdentifier='%@';var callSuccessKey='%@';var callFailKey='%@';var callCompleteKey='%@';var callJsFuncArgKey='%@';var jsType=function(){var type={};var typeArr=['String','Object','Number','Array','Undefined','Function','AsyncFunction','Null','Symbol','Boolean'];for(var i=0;i<typeArr.length;i++){(function(name){type['is'+name]=function(obj){return Object.prototype.toString.call(obj)=='[object '+name+']'}})(typeArr[i])}return type}();var callMap_keyId=0;var callMap_data={};var callMap_add=function(randomKey,funcNameKey,func){var funcMap=callMap_data[randomKey];if(!jsType.isObject(funcMap)){var map={};map[funcNameKey]=func;callMap_data[randomKey]=map}else{funcMap[funcNameKey]=func;callMap_data[randomKey]=funcMap}return randomKey+funcNameKey};var callMap_remove=function(randomKey){if(!callMap_data.hasOwnProperty(randomKey))return;delete callMap_data[randomKey]};var makeParams=function(apiPrefix,moduleName,methodName,params,index){if(!jsType.isObject(params)&&!(jsType.isFunction(params)||jsType.isAsyncFunction(params))){return params}var randomKey='-'+apiPrefix+'-'+(jsType.isUndefined(moduleName)?'Undefined':moduleName)+'-'+methodName+'-arg'+index+'-'+(new Date).getTime().toString()+'-'+(callMap_keyId++).toString()+'-';var newParams={};var funcId='';if(jsType.isFunction(params)||jsType.isAsyncFunction(params)){funcId=callMap_add(randomKey,callJsFuncArgKey,params);newParams[callJsFuncArgKey]=funcId;return newParams}newParams=params;var success=params.success;if(success&&(jsType.isFunction(success)||jsType.isAsyncFunction(success))){funcId=callMap_add(randomKey,callSuccessKey,success);newParams[callSuccessKey]=funcId}var fail=params.fail;if(fail&&(jsType.isFunction(fail)||jsType.isAsyncFunction(fail))){funcId=callMap_add(randomKey,callFailKey,fail);newParams[callFailKey]=funcId}var complete=params.complete;if(complete&&(jsType.isFunction(complete)||jsType.isAsyncFunction(complete))){funcId=callMap_add(randomKey,callCompleteKey,complete);newParams[callCompleteKey]=funcId}return newParams};var sendParams=function(apiPrefix,moduleName,methodName,bridgeIdentifier,params){var newParams=params;var resArgs=[];if(Object.prototype.toString.call(newParams)==='[object Arguments]'){var argCount=newParams.length;for(var argIdx=0;argIdx<argCount;argIdx++){resArgs.push(makeParams(apiPrefix,moduleName,methodName,newParams[argIdx],argIdx))}}return{apiPrefix:apiPrefix,moduleName:moduleName,methodName:methodName,bridgeIdentifier:bridgeIdentifier,args:resArgs}};var sendNativeAsync=function(params){var handler=window.webkit.messageHandlers[msgHandlerName];handler.postMessage(JSON.parse(JSON.stringify(params)))};var sendNativeSync=function(params){var res=prompt(JSON.stringify(params));if(jsType.isNull(res)){return undefined}if(jsType.isString(res)&&res.length==0){return null}if(!res)return null;try{res=JSON.parse(res);return res.data}catch(error){if((jsType.isFunction(window.onerror)||jsType.isAsyncFunction(window.onerror))&&Object.prototype.toString.call(error)=='[object Error]'){window.onerror.apply(window,[error])}}return null};var receviceNativeCall=function(params){var funcRes=null;if(!jsType.isString(params)||!params){return funcRes}var newParams=JSON.parse(decodeURIComponent(params));if(!jsType.isObject(newParams)){return funcRes}var funcId=newParams.funcId;var resDatas=jsType.isArray(newParams.data)?newParams.data:[];var alive=newParams.alive;var randomKey='',funcNameKey='';var matchKey=function(key){var matchNumber=funcId.length-key.length;if(matchNumber>=0&&funcId.lastIndexOf(key)==matchNumber){}else{return false}randomKey=funcId.replace(new RegExp(key,'g'),'');funcNameKey=key;return true};var matchRes=matchKey(callSuccessKey)||matchKey(callFailKey)||matchKey(callCompleteKey)||matchKey(callJsFuncArgKey);if(!matchRes)return funcRes;var funcMap=callMap_data[randomKey];if(!jsType.isObject(funcMap))return funcRes;var func=funcMap[funcNameKey];if(!(jsType.isFunction(func)||jsType.isAsyncFunction(func)))return funcRes;try{funcRes=func(...resDatas)}catch(error){if((jsType.isFunction(window.onerror)||jsType.isAsyncFunction(window.onerror))&&Object.prototype.toString.call(error)=='[object Error]'){window.onerror.apply(window,[error])}funcRes=null}if(alive)return funcRes;if(funcNameKey==callCompleteKey||funcNameKey==callJsFuncArgKey){callMap_remove(randomKey)}return funcRes};var makeApi=function(apiPrefix,moduleName,apiMap){if(!apiPrefix||!jsType.isString(apiPrefix)||!jsType.isObject(apiMap)){return{}}var res={};var mapKeys=Object.keys(apiMap);for(var i=0;i<mapKeys.length;i++){(function(methodName){var config=apiMap[methodName];var isSync=config.hasOwnProperty('sync')?config.sync:false;res[methodName]=isSync?function(){return sendNativeSync(sendParams(apiPrefix,moduleName,methodName,bridgeSyncIdentifier,arguments))}:function(){sendNativeAsync(sendParams(apiPrefix,moduleName,methodName,bridgeAsyncIdentifier,arguments))}})(mapKeys[i])}return res};var makeModuleApi=function(apiPrefix,desApi,moduleApiMap){if(!apiPrefix||!jsType.isString(apiPrefix)||!desApi||!jsType.isObject(desApi)||!moduleApiMap||!jsType.isObject(moduleApiMap)){return desApi}var resModuleMap={};var mapKeys=Object.keys(moduleApiMap);for(var i=0;i<mapKeys.length;i++){(function(moduleName){resModuleMap[moduleName]=makeApi(apiPrefix,moduleName,moduleApiMap[moduleName])})(mapKeys[i])}var modulesKey='registerModules';var requireModuleKey='requireModule';desApi[modulesKey]=function(){return resModuleMap};desApi[requireModuleKey]=function(moduleName){if(!moduleName||!jsType.isString(moduleName)){return undefined}return resModuleMap[moduleName]};mapKeys=Object.keys(resModuleMap);for(var j=0;j<mapKeys.length;j++){(function(moduleName){desApi[moduleName]=function(){var moduleFunc=desApi[requireModuleKey];if(!moduleFunc){return moduleFunc}if(!(jsType.isFunction(moduleFunc)||jsType.isAsyncFunction(moduleFunc))){return undefined}return moduleFunc(moduleName)}})(mapKeys[j])}return desApi};return[receviceNativeCall,makeApi,makeModuleApi]}();var %@=My_JsBridge[0];var %@=My_JsBridge[1];var %@=My_JsBridge[2];";
static NSString * const JsBridge_resource_console = @"console.log=function(oriLogFunc){return function(){oriLogFunc.apply(console,arguments);try{var errorRes=[];var parseData=function(data){var res=null;var type=Object.prototype.toString.call(data);if(type=='[object Null]'||type=='[object String]'||type=='[object Number]'){res=data}else if(type=='[object Function]'){res=data.toString()}else if(type=='[object Undefined]'){res='Undefined'}else if(type=='[object Boolean]'){res=data?'true':'false'}else if(type=='[object Object]'){res={};var mapKeys=Object.keys(data);for(var i=0;i<mapKeys.length;i++){(function(key){res[key]=parseData(data[key])})(mapKeys[i])}}else if(type=='[object Array]'){res=[];data.forEach(function(el){res.push(parseData(el))})}else if(type=='[object Error]'){res=data;errorRes.push(res)}else if(type=='[object Window]'){res=data.toString()}else{res=data}return res};var params=arguments;if(Object.prototype.toString.call(params)!='[object Arguments]')return;var argCount=params.length;var iosRes=[];var fetchVaule=function(aIdx){return argCount>aIdx?params[aIdx]:'no this params at index: '+aIdx};if(argCount==0)return;if(argCount==1){iosRes=parseData(fetchVaule(0))}else{for(var idx=0;idx<argCount;idx++){iosRes.push(parseData(fetchVaule(idx)))}}%@.sendNative('log',JSON.parse(JSON.stringify(iosRes)))}catch(error){}return;if(errorRes.length==0)return;if(!window.onerror)return;try{errorRes.forEach(function(el){window.onerror(el)})}catch(error){}}}(console.log);";
static NSString * const JsBridge_resource_error = @"window.onerror=function(oriFunc){return function(){try{if(oriFunc){oriFunc.apply(window,arguments)}var params=arguments;if(Object.prototype.toString.call(params)!='[object Arguments]'){return}var argCount=params.length;if(argCount==0){return}var resErr={};var keys=['message','sourceURL','line','column','stack'];if(Object.prototype.toString.call(params[0])=='[object Error]'){keys.forEach(el=>{resErr[el]=params[0][el]})}else{if(argCount>4&&Object.prototype.toString.call(params[4])=='[object Error]'){keys.forEach(el=>{resErr[el]=params[4][el]})}else{var minCount=Math.min(keys.length,argCount);for(let i=0;i<minCount;i++){resErr[keys[i]]=params[i]}}}%@.sendNative(JSON.parse(JSON.stringify(resErr)))}catch(error){}}}(window.onerror);";
static NSString * const JsBridge_resource_socket = @"window.JsBridge_OriginSocket=WebSocket;window.WebSocket=function(url,protocols){var ws=new JsBridge_OriginSocket(url,protocols);setTimeout(function(){ws.addEventListener('message',function(event){var data=event.data;var formatData=[];if(data.length<=1){formatData=data}else{data=JSON.parse(data.substring(1));if(Object.prototype.toString.call(data)=='[object Array]'&&data.length>0){data=JSON.parse(data[0]);formatData.push(data);%@.socketDidReceiveMessage(data)}else{formatData=data}}})},1e3);return ws};";
