const ZhengJSToNativeHandlerName='%@';const ZhengCallBackSuccessKey='%@';const ZhengCallBackFailKey='%@';const ZhengCallBackCompleteKey='%@';const ZhengJSType=(()=>{let type={};const typeArr=['String','Object','Number','Array','Undefined','Function','Null','Symbol','Boolean'];for(let i=0;i<typeArr.length;i++){(name=>{type['is'+name]=(obj=>{return Object.prototype.toString.call(obj)=='[object '+name+']'})})(typeArr[i])}return type})();const ZhengCallBackMap={};const %@=params=>{if(!ZhengJSType.isString(params)||!params){return}const newParams=JSON.parse(decodeURIComponent(params));if(!ZhengJSType.isObject(newParams)){return}const funcId=newParams.funcId;const res=newParams.data;const alive=newParams.alive;let randomKey='',funcNameKey='';const matchKey=key=>{if(!funcId.endsWith(key))return false;randomKey=funcId.replace(new RegExp(key,'g'),'');funcNameKey=key;return true};const matchRes=matchKey(ZhengCallBackSuccessKey)||matchKey(ZhengCallBackFailKey)||matchKey(ZhengCallBackCompleteKey);if(!matchRes)return;let funcMap=ZhengCallBackMap[randomKey];if(!ZhengJSType.isObject(funcMap))return;const func=funcMap[funcNameKey];if(!ZhengJSType.isFunction(func))return;try{func(res)}catch(error){console.log('CallBack-error');console.log(error)}if(alive)return;if(funcNameKey==ZhengCallBackCompleteKey){ZhengRemoveCallBack(randomKey)}};const ZhengAddCallBack=(randomKey,funcNameKey,func)=>{let funcMap=ZhengCallBackMap[randomKey];if(!ZhengJSType.isObject(funcMap)){const map={};map[funcNameKey]=func;ZhengCallBackMap[randomKey]=map;return}if(funcMap.hasOwnProperty(funcNameKey))return;funcMap[funcNameKey]=func;ZhengCallBackMap[randomKey]=funcMap};const ZhengRemoveCallBack=randomKey=>{if(!ZhengCallBackMap.hasOwnProperty(randomKey))return;delete ZhengCallBackMap[randomKey]};const ZhengHandleCallBackParams=(methodName,params)=>{if(!ZhengJSType.isObject(params)){return params}const randomKey=`-${methodName}-${(new Date).getTime()}-${Math.floor(Math.random()*1e4)}-`;let newParams=params;const success=params.success;if(success&&ZhengJSType.isFunction(success)){const funcId=randomKey+ZhengCallBackSuccessKey;ZhengAddCallBack(randomKey,ZhengCallBackSuccessKey,success);newParams[ZhengCallBackSuccessKey]=funcId}const fail=params.fail;if(fail&&ZhengJSType.isFunction(fail)){const funcId=randomKey+ZhengCallBackFailKey;ZhengAddCallBack(randomKey,ZhengCallBackFailKey,fail);newParams[ZhengCallBackFailKey]=funcId}const complete=params.complete;if(complete&&ZhengJSType.isFunction(complete)){const funcId=randomKey+ZhengCallBackCompleteKey;ZhengAddCallBack(randomKey,ZhengCallBackCompleteKey,complete);newParams[ZhengCallBackCompleteKey]=funcId}return newParams};const ZhengSendParams=(apiPrefix,methodName,params,sync=false)=>{let newParams=params;let res={};if(!sync){newParams=ZhengHandleCallBackParams(methodName,params)}const haveParms=!(ZhengJSType.isNull(newParams)||ZhengJSType.isUndefined(newParams));res=haveParms?{methodName:methodName,apiPrefix:apiPrefix,params:newParams}:{methodName:methodName,apiPrefix:apiPrefix};return sync?res:JSON.parse(JSON.stringify(res))};const ZhengSendParamsSync=(apiPrefix,methodName,params)=>{return ZhengSendParams(apiPrefix,methodName,params,true)};const ZhengSendNative=params=>{const handler=window.webkit.messageHandlers[ZhengJSToNativeHandlerName];handler.postMessage(params)};const ZhengSendNativeSync=params=>{let res=prompt(JSON.stringify(params));try{res=JSON.parse(res);return res.data}catch(error){console.log('❌SendNativeSync--error');console.log(error)}return null};const %@=(apiPrefix,apiMap)=>{let res={};for(const key in apiMap){if(!apiMap.hasOwnProperty(key)){continue}const config=apiMap[key];const isSync=config.hasOwnProperty('sync')?config.sync:false;const func=isSync?params=>{return ZhengSendNativeSync(ZhengSendParamsSync(apiPrefix,key,params))}:params=>{ZhengSendNative(ZhengSendParams(apiPrefix,key,params))};res[key]=func}return res};